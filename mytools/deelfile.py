# -*-coding:utf-8-*-
import os
import xlwt
from moviepy.editor import VideoFileClip
from mytools.mylog import Mylog
import gc
import shutil

realdict ={'00:59:59': '1.01 开学典礼 2', '01:35:43': '1.02 开学典礼 3', '00:37:36': '1.03 Appium log 分析【试听内容】', '00:11:51': '2.01 Linux系统与Shell环境准备', '00:52:35': '2.02 Linux三剑客与管道使用', '00:14:13': '2.03 Linux常用命令 (文件/网络/性能)', '00:16:49': '2.04 Bash编程语法', '00:18:45': '2.05 Bash脚本编写', '00:20:25': '2.06 Linux进阶命令', '01:00:24': '3.01 三剑客实战Nginx日志分析 1', '00:54:26': '3.02 三剑客实战Nginx日志分析 2', '01:30:07': '3.03 三剑客实战Linux性能统计分析 1', '01:29:59': '3.04 三剑客实战Linux性能统计分析 2', '00:51:23': '3.05 抽奖程序脚本编写', '00:34:14': '4.01 git常用命令', '00:19:48': '4.02 git log分析与检索', '00:05:09': '4.03 git分支管理', '00:06:24': '4.04 分支开发主干发布模式', '00:24:37': '5.01 python环境管理', '00:17:08': '5.02 python基本数据类型与操作', '00:30:33': '5.03 python控制流语法', '00:26:07': '5.04 python函数', '00:42:20': '5.05 python常用数据结构', '00:30:07': '5.06 python模块', '00:53:02': '5.07 python输入与输出', '00:32:10': '5.08 python错误与异常', '00:32:53': '5.09 python面向对象编程', '00:36:05': '6.01 python标准库', '00:39:49': '6.02 python多线程处理', '00:11:29': '6.03 python第三方库', '00:29:16': '6.04 pip依赖管理与虚拟环境', '01:08:01': '6.05 python unittest测试框架', '00:33:36': '6.06 pytest测试框架', '00:12:07': '6.07 参数化用例', '00:10:01': '6.08 数据驱动', '00:55:59': '6.09 测试报告美化与定制', '01:02:10': '7.01 python pytest测试实战 1', '01:13:38': '7.02 python pytest测试实战 2', '01:29:41': '7.03 python pytest测试实战 3', '01:29:59_88': '7.04 python pytest测试实战 4', '00:54:52': '7.05 python pytest测试实战 5', '00:11:07': '8.01 selenium的安装', '00:14:39': '8.02 selenium IDE用例录制', '00:18:44': '8.03 selenium测试用例编写', '00:24:25': '8.04 隐式等待与显式等待', '00:38:28': '8.05 web控件定位与常见操作', '00:49:24': '8.06 web控件的交互进阶', '00:29:32': '8.07 网页frame与多窗口处理', '00:04:04': '8.08 selenium多浏览器处理', '00:23:22': '8.09 执行javascript脚本', '01:02:32': '9.01 企业微信的自动化登录 1', '00:40:59': '9.02 企业微信的自动化登录 2', '01:30:26': '9.03 Page Object演练 1', '01:03:10': '9.04 Page Object演练 2', '00:38:43': '9.05 企业微信web端自动化测试实战', '00:17:50': '9.06 文件上传弹框处理', '00:14:18': '9.07 Page Object设计模式', '00:12:35': '9.08 Page Object原则', '00:38:51': '10.01 appium环境安装与架构介绍', '00:39:42': '10.02 appium用例录制', '00:34:41': '10.03 元素定位方法与隐式等待', '00:38:48': '10.04 app控件定位', '00:19:13': '10.05 app控件交互', '00:22:14': '10.06 触屏操作自动化', '00:51:57': '10.07 高级定位技巧', '00:21:03': '10.08 显式等待机制', '00:17:09': '10.09 特殊控件toast识别', '00:31:50': '11.01 属性获取与断言', '00:24:42': '11.02 00:31:50/96.4MB', '01:57:19': '11.03 android webview测试', '00:26:50': '11.04 微信小程序测试', '00:12:29': '11.05 设备交互Api', '00:04:22': '11.06 模拟器控制', '00:15:46': '11.07 capability使用进阶', '00:26:52': '11.08 android webview技术原理', '00:22:08': '11.09 appium问题分析定位', '01:00:15': '12.01 企业微信移动app测试实战 1', '01:03:31': '12.02 企业微信移动app测试实战 2', '01:45:27': '12.03 企业微信移动app测试实战 3', '01:30:00': '12.04 企业微信移动app测试实战 4', '00:46:53': '12.05 企业微信移动app测试实战 5', '00:21:40': '12.06 appium原理与JsonWP协议分析', '00:17:43': '12.07 appium源代码分析', '00:38:06': '12.08 appium二次封装实战', '00:06:11': '13.01 测试框架设计思想', '00:18:13': '13.02 page object改造', '00:14:57': '13.03 测试步骤的数据驱动', '00:08:29': '13.04 测试数据的数据驱动', '00:05:23': '13.05 配置的数据驱动', '00:03:45': '13.06 通用Page封装', '00:12:39': '13.07 自动化异常处理机制', '00:06:12': '13.08 通用测试用例封装', '00:05:49': '13.09 通用测试框架构建', '01:03:43': '14.01 打造自己的测试框架 1', '00:49:09': '14.02 打造自己的测试框架 2', '01:33:31': '14.03 打造自己的测试框架 3', '01:02:55': '14.04 打造自己的测试框架 4', '00:36:08': '14.05 打造自己的测试框架 5', '00:09:28': '15.01 自动遍历测试技术', '00:15:59': '15.02 android monkey遍历测试工具', '00:09:51': '15.03 android maxim遍历测试工具', '00:42:50': '15.04 多平台自动遍历测试工具appcrawler', '00:16:57': '15.05 多设备管理平台STF', '00:59:49': '15.06 跨平台设备管理方案 Selenium Grid', '00:03:33': '15.07 基于Jenkins的自动化调度详解', '00:34:07': '16.01 app启动性能分析', '00:03:40': '16.02 接口性能分析', '00:16:31': '16.03 Webview性能分析', '00:13:16': '16.04 H5性能分析', '00:18:41': '16.05 卡顿分析', '00:37:17': '16.06 系统资源分析', '00:21:43': '16.07 耗电量测试', '00:11:35': '16.08 弱网测试', '00:06:03': '16.09 健壮性测试', '00:07:34': '16.1 兼容性测试', '00:14:59': '17.01 接口测试价值与体系', '00:17:01': '17.02 常见接口协议解析', '00:15:44': '17.03 抓包分析tcp协议', '01:12:33': '17.04 使用postman发送请求', '00:23:13': '17.05 使用curl发送请求', '00:12:46': '17.06 常用代理工具', '00:28:45': '17.07 http/https抓包分析', '00:09:29': '17.08 http协议讲解', '01:01:52': '18.01 雪球app抓包与mock实战 1', '00:43:58': '18.02 雪球app抓包与mock实战 2', '01:30:29': '18.03 雪球app抓包与mock实战 3', '01:00:47': '18.04 雪球app抓包与mock实战 4', '00:37:33': '18.05 雪球app抓包与mock实战 5', '00:12:00': '18.06 get、post区别实战详解', '00:21:59': '18.07 session、cookie、token区别解析', '00:09:06': '18.08 mock应用', '00:16:05': '19.01 接口测试框架', '00:10:44': '19.02 接口请求构造', '00:04:46': '19.03 接口测试断言', '00:10:50': '19.04 json/xml请求', '00:16:07': '19.05 json/xml响应断言', '00:06:45': '19.06 schema断言', '00:07:03': '19.07 header cookie处理', '00:08:22': '19.08 认证体系', '01:03:04': '20.01 企业微信接口测试实战 1', '00:31:03': '20.02 企业微信接口测试实战 2', '01:04:39': '20.03 企业微信接口测试实战 3', '00:30:19': '20.04 企业微信接口测试实战 4', '00:59:43': '20.05 企业微信接口测试实战 5', '00:35:22': '20.06 企业微信接口测试实战 6', '00:14:58': '21.01 容器技术介绍', '00:34:01': '21.02 docker安装与配置', '00:45:16': '21.03 docker常用命令', '00:10:59': '21.04 搭建Web服务器nginx', '00:09:21': '21.05 搭建测试用例管理平台testlink', '00:17:51': '21.06 搭建持续集成平台Jenkins', '00:18:40': '21.07 docker-compose使用', '00:17:10': '21.08 docker的registry介绍', '00:25:09': '21.09 dockerfile语法与指令', '00:20:46': '21.1 docker镜像构建', '01:00:53': '22.01 docker实战常用测试平台搭建 1', '00:32:04': '22.02 docker实战常用测试平台搭建 2', '01:05:49': '22.03 docker镜像构建实战 1', '00:59:59_340': '22.04 docker镜像构建实战 2', '01:00:00': '22.05 docker镜像构建实战 3', '00:39:15': '22.06 docker镜像构建实战 4', '01:00:48': '23.01 JMeter介绍与安装', '00:41:45': '23.02 压测脚本录制与编写', '00:34:36': '23.03 虚拟用户并发模拟', '00:40:48': '23.04 压测结果分析', '00:25:17': '23.05 JMeter分布式压测', '00:44:21': '23.06 性能监控系统', '00:38:03': '23.07 性能监控体系实战', '00:11:36': '24.01 服务端安全测试体系', '00:06:22': '24.02 安全测试模拟环境', '00:05:59': '24.03 常见接口安全测试工具', '00:13:13': '24.04 安全测试工具BurpSuite', '00:05:03': '24.05 命令注入漏洞', '00:06:33': '24.06 SQL注入漏洞', '00:05:53': '24.07 XSS漏洞', '00:06:16': '24.08 CSRF漏洞', '00:08:21': '25.01 持续集成体系介绍', '00:18:12': '25.02 jenkins安装', '00:12:40': '25.03 jenkins job机制', '00:12:05': '25.04 节点管理', '00:13:27': '25.05 权限控制', '00:06:42': '25.06 常用插件', '00:18:00': '25.07 报警机制', '00:14:30': '25.08 矩阵job与父子job', '01:03:47': '26.01 持续集成实战-UI自动化测试集成实战（上）', '00:58:09': '26.02 持续集成实战-UI自动化测试集成实战（下）', '01:03:25': '26.03 持续集成实战-接口测试集成实战 1', '01:00:00_406': '26.04 持续集成实战-接口测试集成实战 2', '01:00:00_408': '26.05 持续集成体系构建 1', '00:45:29': '26.06 持续集成体系构建 2', '00:29:09': '27.01 jenkins api接口', '00:14:26': '27.02 pipeline入门', '00:28:45_417': '27.03 jenkinsfile语法', '00:08:04': '27.04 blue ocean应用', '01:03:33': '28.01 持续交付实战 1', '00:55:43': '28.02 持续交付实战 2', '00:31:28': '28.03 持续交付实战 3', '00:30:04': '28.04 持续交付实战 4', '01:00:00_430': '28.05 持续交付实战 5', '00:59:59_432': '28.06 持续交付实战 6', '00:41:21': '28.07 持续交付实战 7', '00:12:12': '29.01 接口流程封装与定义', '00:19:57': '29.02 基于加密接口的测试用例设计', '00:19:36': '29.03 多环境下的接口测试', '00:04:52': '29.04 api object模式与原则', '00:09:11': '29.05 api object模式应用', '00:14:59_447': '29.06 通用api封装', '00:19:07': '29.07 00:14:59/25.7MB', '00:02:47': '29.08 00:19:07/34.7MB', '00:02:19': '29.09 00:02:47/3.4MB', '00:59:30': '30.01 HttpRunner作者亲授从零打造接口测试框架 1', '01:09:53': '30.02 HttpRunner作者亲授从零打造接口测试框架 2', '00:59:05': '30.03 HttpRunner作者亲授从零打造接口测试框架 3', '01:00:00_459': '30.04 HttpRunner作者亲授从零打造接口测试框架 4', '00:58:06': '30.05 HttpRunner作者亲授从零打造接口测试框架 5', '01:04:52': '30.06 HttpRunner作者亲授从零打造接口测试框架 6', '00:04:01': '30.07 01:04:52/799.3MB', '00:04:29': '30.08 00:04:01/7.1MB', '00:26:09': '31.01 数据库搭建与使用', '00:09:02': '31.02 phpmyadmin操作', '00:10:47': '31.03 数据库结构解析', '00:14:09': '31.04 sql dds数据库与表结构创建', '00:28:52': '31.05 sql dms数据查询', '00:13:17': '31.06 sql join', '00:30:18': '31.07 redis 内存数据库', '00:32:43': '31.08 mongodb nosql数据库', '00:33:28': '31.09 neo4j图数据库'}
HEADLINE = [ '27节 持续交付_DevOps', '28节 持续交付_DevOps', '29节 接口测试框架', '30节 接口测试框架', '31节 SQL语法与数据库课程']


class DeelFile:
    def __init__(self):
        self.mylog = Mylog()

    @classmethod
    def mymakedir(cls, path):
        os.mkdir(path)


    @classmethod
    def get_filesize(cls, filePath):
        # filePath = unicode(filePath, 'utf8')
        fsize = os.path.getsize(filePath)
        fsize = fsize / float(1024 * 1024)
        return round(fsize, 4)

    @classmethod
    def get_pathfiles(cls, filePath):
        files = os.listdir(filePath)
        return files

    def get_file_times(self, filename):
        """
        获取视频时长（s:秒）
        """
        file_time = None
        try:
            clip = VideoFileClip(filename)
            file_time = self.timeConvert(clip.duration)
            clip.close()
        except Exception as e:
            self.mylog.error(e)
            return -1
        return file_time

    def timeConvert(self, size):  # 单位换算
        M, H = 60, 60 ** 2
        # if size < M:
        #     return str(size) + u'秒'
        # if size < H:
        #     return u'%s:%s' % (int(size / M), int(size % M))
        # else:
        #     hour = int(size / H)
        #     mine = int(size % H / M)
        #     second = int(size % H % M)
        #     tim_srt = u'%s:%s:%s' % (hour, mine, second)
        #     return tim_srt
        hour = int(size / H)
        if hour < 10:
            hour = '0'+str(hour)
        mine = int(size % H / M)
        if mine < 10:
            mine = '0'+str(mine)
        second = int(size % H % M)
        if second < 10:
            second = '0'+str(second)
        tim_srt = u'%s:%s:%s' % (hour, mine, second)
        return tim_srt

    @classmethod
    def filenamechange(cls, nameOld, nameNew):
        os.renames(nameOld, nameNew)

    def filemove(self, path, filepath):
        # 这里不做其他判断，必须保证路径正确
        try:
            shutil.move(path, filepath)
        except Exception as e:
            raise

    @classmethod
    def CoursesizeList(self):
        lastlist = ['1节 开学典礼', '开学典礼 2', '00:59:59/69.7MB', '开学典礼 3', '01:35:43/117.0MB', 'Appium log 分析【试听内容】', '00:37:36/240.7MB', '开学典礼 1', '下载错误', '2节 Linux与Bash课程', 'Linux系统与Shell环境准备', '00:11:51/51.7MB', 'Linux三剑客与管道使用', '00:52:35/264.9MB', 'Linux常用命令 (文件/网络/性能)', '00:14:13/122.9MB', 'Bash编程语法', '00:16:49/65.9MB', 'Bash脚本编写', '00:18:45/70.2MB', 'Linux进阶命令', '00:20:25/145.4MB', '3节 Linux与Bash课程', '三剑客实战Nginx日志分析 1', '01:00:24/284.4MB', '三剑客实战Nginx日志分析 2', '00:54:26/314.0MB', '三剑客实战Linux性能统计分析 1', '01:30:07/637.3MB', '三剑客实战Linux性能统计分析 2', '01:29:59/361.3MB', '抽奖程序脚本编写', '00:51:23/307.0MB', '4节 git代码管理', 'git常用命令', '00:34:14/204.9MB', 'git log分析与检索', '00:19:48/134.9MB', 'git分支管理', '00:05:09/19.1MB', '分支开发主干发布模式', '00:06:24/50.6MB', '5节 Python编程语言与测试框架', 'python环境管理', '00:24:37/35.0MB', 'python基本数据类型与操作', '00:17:08/24.7MB', 'python控制流语法', '00:30:33/41.2MB', 'python函数', '00:26:07/39.7MB', 'python常用数据结构', '00:42:20/54.1MB', 'python模块', '00:30:07/52.9MB', 'python输入与输出', '00:53:02/104.7MB', 'python错误与异常', '00:32:10/68.5MB', 'python面向对象编程', '00:32:53/52.7MB', '6节 Python编程语言与测试框架', 'python标准库', '00:36:05/86.1MB', 'python多线程处理', '00:39:49/224.1MB', 'python第三方库', '00:11:29/28.0MB', 'pip依赖管理与虚拟环境', '00:29:16/53.7MB', 'python unittest测试框架', '01:08:01/134.8MB', 'pytest测试框架', '00:33:36/73.2MB', '参数化用例', '00:12:07/51.3MB', '数据驱动', '00:10:01/14.7MB', '测试报告美化与定制', '00:55:59/376.0MB', '7节 Python编程语言与测试框架', 'python pytest测试实战 1', '01:02:10/387.4MB', 'python pytest测试实战 2', '01:13:38/507.4MB', 'python pytest测试实战 3', '01:29:41/797.0MB', 'python pytest测试实战 4', '01:29:59/771.0MB', 'python pytest测试实战 5', '00:54:52/466.0MB', '8节 Web自动化测试', 'selenium的安装', '00:11:07/62.9MB', 'selenium IDE用例录制', '00:14:39/65.6MB', 'selenium测试用例编写', '00:18:44/39.6MB', '隐式等待与显式等待', '00:24:25/173.4MB', 'web控件定位与常见操作', '00:38:28/311.4MB', 'web控件的交互进阶', '00:49:24/116.0MB', '网页frame与多窗口处理', '00:29:32/73.1MB', 'selenium多浏览器处理', '00:04:04/5.9MB', '执行javascript脚本', '00:23:22/55.9MB', '9节 Web自动化测试', '企业微信的自动化登录 1', '01:02:32/670.6MB', '企业微信的自动化登录 2', '00:40:59/358.7MB', 'Page Object演练 1', '01:30:26/893.9MB', 'Page Object演练 2', '01:03:10/634.0MB', '企业微信web端自动化测试实战', '00:38:43/341.6MB', '文件上传弹框处理', '00:17:50/45.7MB', 'Page Object设计模式', '00:14:18/128.4MB', 'Page Object原则', '00:12:35/89.6MB', '10节 移动端app自动化测试', 'appium环境安装与架构介绍', '00:38:51/62.5MB', 'appium用例录制', '00:39:42/86.3MB', '元素定位方法与隐式等待', '00:34:41/80.9MB', 'app控件定位', '00:38:48/65.3MB', 'app控件交互', '00:19:13/52.9MB', '触屏操作自动化', '00:22:14/78.8MB', '高级定位技巧', '00:51:57/125.3MB', '显式等待机制', '00:21:03/43.5MB', '特殊控件toast识别', '00:17:09/43.0MB', '11节 移动端app自动化测试', '属性获取与断言', '00:31:50/96.4MB', '00:24:42/78.9MB', 'android webview测试', '01:57:19/447.6MB', '微信小程序测试', '00:26:50/46.7MB', '设备交互Api', '00:12:29/29.5MB', '模拟器控制', '00:04:22/19.9MB', 'capability使用进阶', '00:15:46/71.7MB', 'android webview技术原理', '00:26:52/108.1MB', 'appium问题分析定位', '00:22:08/174.1MB', '12节 移动端app自动化测试', '企业微信移动app测试实战 1', '01:00:15/442.7MB', '企业微信移动app测试实战 2', '01:03:31/669.4MB', '企业微信移动app测试实战 3', '01:45:27/872.5MB', '企业微信移动app测试实战 4', '01:30:00/762.9MB', '企业微信移动app测试实战 5', '00:46:53/434.9MB', 'appium原理与JsonWP协议分析', '00:21:40/91.8MB', 'appium源代码分析', '00:17:43/120.4MB', 'appium二次封装实战', '00:38:06/180.3MB', '13节 UI自动化测试框架', '测试框架设计思想', '00:06:11/13.5MB', 'page object改造', '00:18:13/136.7MB', '测试步骤的数据驱动', '00:14:57/67.1MB', '测试数据的数据驱动', '00:08:29/27.4MB', '配置的数据驱动', '00:05:23/32.0MB', '通用Page封装', '00:03:45/19.8MB', '自动化异常处理机制', '00:12:39/77.4MB', '通用测试用例封装', '00:06:12/36.1MB', '通用测试框架构建', '00:05:49/23.4MB', '14节 UI自动化测试框架', '打造自己的测试框架 1', '01:03:43/761.5MB', '打造自己的测试框架 2', '00:49:09/354.6MB', '打造自己的测试框架 3', '01:33:31/887.3MB', '打造自己的测试框架 4', '01:02:55/549.6MB', '打造自己的测试框架 5', '00:36:08/333.5MB', '15节 客户端测试平台', '自动遍历测试技术', '00:09:28/28.9MB', 'android monkey遍历测试工具', '00:15:59/60.9MB', 'android maxim遍历测试工具', '00:09:51/54.6MB', '多平台自动遍历测试工具appcrawler', '00:42:50/282.7MB', '多设备管理平台STF', '00:16:57/66.0MB', '跨平台设备管理方案 Selenium Grid', '00:59:49/169.7MB', '基于Jenkins的自动化调度详解', '00:03:33/8.4MB', '16节 客户端专项测试', 'app启动性能分析', '00:34:07/176.3MB', '接口性能分析', '00:03:40/7.4MB', 'Webview性能分析', '00:16:31/95.7MB', 'H5性能分析', '00:13:16/64.8MB', '卡顿分析', '00:18:41/132.3MB', '系统资源分析', '00:37:17/311.5MB', '耗电量测试', '00:21:43/155.2MB', '弱网测试', '00:11:35/58.0MB', '健壮性测试', '00:06:03/24.8MB', '兼容性测试', '00:07:34/69.8MB', '17节 服务端接口测试', '接口测试价值与体系', '00:14:59/14.1MB', '常见接口协议解析', '00:17:01/15.0MB', '抓包分析tcp协议', '00:15:44/26.0MB', '使用postman发送请求', '01:12:33/79.7MB', '使用curl发送请求', '00:23:13/49.3MB', '常用代理工具', '00:12:46/22.2MB', 'http/https抓包分析', '00:28:45/47.3MB', 'http协议讲解', '00:09:29/17.7MB', '18节 服务端接口测试', '雪球app抓包与mock实战 1', '01:01:52/703.3MB', '雪球app抓包与mock实战 2', '00:43:58/404.5MB', '雪球app抓包与mock实战 3', '01:30:29/958.5MB', '雪球app抓包与mock实战 4', '01:00:47/746.5MB', '雪球app抓包与mock实战 5', '00:37:33/544.4MB', 'get、post区别实战详解', '00:12:00/18.8MB', 'session、cookie、token区别解析', '00:21:59/40.4MB', 'mock应用', '00:09:06/25.5MB', '19节 接口自动化测试', '接口测试框架', '00:16:05/20.9MB', '接口请求构造', '00:10:44/15.1MB', '接口测试断言', '00:04:46/7.3MB', 'json/xml请求', '00:10:50/14.2MB', 'json/xml响应断言', '00:16:07/32.1MB', 'schema断言', '00:06:45/11.0MB', 'header cookie处理', '00:07:03/12.9MB', '认证体系', '00:08:22/14.2MB', '20节 接口自动化测试', '企业微信接口测试实战 1', '01:03:04/799.1MB', '企业微信接口测试实战 2', '00:31:03/375.0MB', '企业微信接口测试实战 3', '01:04:39/715.3MB', '企业微信接口测试实战 4', '00:30:19/380.5MB', '企业微信接口测试实战 5', '00:59:43/630.8MB', '企业微信接口测试实战 6', '00:35:22/382.2MB', '21节 docker容器技术', '容器技术介绍', '00:14:58/12.8MB', 'docker安装与配置', '00:34:01/49.1MB', 'docker常用命令', '00:45:16/77.3MB', '搭建Web服务器nginx', '00:10:59/15.1MB', '搭建测试用例管理平台testlink', '00:09:21/15.9MB', '搭建持续集成平台Jenkins', '00:17:51/40.0MB', 'docker-compose使用', '00:18:40/28.4MB', 'docker的registry介绍', '00:17:10/26.3MB', 'dockerfile语法与指令', '00:25:09/37.6MB', 'docker镜像构建', '00:20:46/33.3MB', '22节 docker容器技术', 'docker实战常用测试平台搭建 1', '01:00:53/404.6MB', 'docker实战常用测试平台搭建 2', '00:32:04/216.8MB', 'docker镜像构建实战 1', '01:05:49/346.8MB', 'docker镜像构建实战 2', '00:59:59/303.3MB', 'docker镜像构建实战 3', '01:00:00/356.6MB', 'docker镜像构建实战 4', '00:39:15/235.2MB', '23节 服务端性能测试', 'JMeter介绍与安装', '01:00:48/95.0MB', '压测脚本录制与编写', '00:41:45/78.8MB', '虚拟用户并发模拟', '00:34:36/53.5MB', '压测结果分析', '00:40:48/68.3MB', 'JMeter分布式压测', '00:25:17/61.8MB', '性能监控系统', '00:44:21/83.1MB', '性能监控体系实战', '00:38:03/103.1MB', '电商系统的压测实战', '05:45:59/1.6GB', '电商系统的压测实战2', '05:45:37/2.6GB', '24节 接口安全测试', '服务端安全测试体系', '00:11:36/16.7MB', '安全测试模拟环境', '00:06:22/10.9MB', '常见接口安全测试工具', '00:05:59/5.1MB', '安全测试工具BurpSuite', '00:13:13/19.5MB', '命令注入漏洞', '00:05:03/5.6MB', 'SQL注入漏洞', '00:06:33/6.5MB', 'XSS漏洞', '00:05:53/10.5MB', 'CSRF漏洞', '00:06:16/6.6MB', '25节 持续集成', '持续集成体系介绍', '00:08:21/7.8MB', 'jenkins安装', '00:18:12/31.6MB', 'jenkins job机制', '00:12:40/14.7MB', '节点管理', '00:12:05/38.6MB', '权限控制', '00:13:27/43.6MB', '常用插件', '00:06:42/22.5MB', '报警机制', '00:18:00/109.9MB', '矩阵job与父子job', '00:14:30/45.8MB', '26节 持续集成', '持续集成实战-UI自动化测试集成实战（上）', '01:03:47/202.9MB', '持续集成实战-UI自动化测试集成实战（下）', '00:58:09/265.9MB', '持续集成实战-接口测试集成实战 1', '01:03:25/280.3MB', '持续集成实战-接口测试集成实战 2', '01:00:00/267.3MB', '持续集成体系构建 1', '01:00:00/221.8MB', '持续集成体系构建 2', '00:45:29/196.4MB', '27节 持续交付/DevOps', 'jenkins api接口', '00:29:09/189.6MB', 'pipeline入门', '00:14:26/57.3MB', 'jenkinsfile语法', '00:28:45/120.0MB', 'blue ocean应用', '00:08:04/37.8MB', '28节 持续交付/DevOps', '持续交付实战 1', '01:03:33/230.2MB', '持续交付实战 2', '00:55:43/303.1MB', '持续交付实战 3', '00:31:28/144.5MB', '持续交付实战 4', '00:30:04/140.4MB', '持续交付实战 5', '01:00:00/288.4MB', '持续交付实战 6', '00:59:59/255.4MB', '持续交付实战 7', '00:41:21/223.3MB', '29节 接口测试框架', '接口流程封装与定义', '00:12:12/13.8MB', '基于加密接口的测试用例设计', '00:19:57/36.9MB', '多环境下的接口测试', '00:19:36/32.8MB', 'api object模式与原则', '00:04:52/5.4MB', 'api object模式应用', '00:09:11/15.9MB', '通用api封装', '00:14:59/25.7MB', '00:19:07/34.7MB', '00:02:47/3.4MB', '00:02:19/3.0MB', '30节 接口测试框架', 'HttpRunner作者亲授从零打造接口测试框架 1', '00:59:30/390.1MB', 'HttpRunner作者亲授从零打造接口测试框架 2', '01:09:53/525.8MB', 'HttpRunner作者亲授从零打造接口测试框架 3', '00:59:05/565.3MB', 'HttpRunner作者亲授从零打造接口测试框架 4', '01:00:00/669.2MB', 'HttpRunner作者亲授从零打造接口测试框架 5', '00:58:06/657.2MB', 'HttpRunner作者亲授从零打造接口测试框架 6', '01:04:52/799.3MB', '00:04:01/7.1MB', '00:04:29/5.1MB', '31节 SQL语法与数据库课程', '数据库搭建与使用', '00:26:09/146.9MB', 'phpmyadmin操作', '00:09:02/42.5MB', '数据库结构解析', '00:10:47/21.3MB', 'sql dds数据库与表结构创建', '00:14:09/25.1MB', 'sql dms数据查询', '00:28:52/150.7MB', 'sql join', '00:13:17/71.9MB', 'redis 内存数据库', '00:30:18/196.5MB', 'mongodb nosql数据库', '00:32:43/96.4MB', 'neo4j图数据库', '00:33:28/130.0MB']
        titles = []
        i = 0
        j = 0
        thlen = len(lastlist)
        tempstr = None
        thx = 0
        while i < thlen:
            if lastlist[i].split(' ')[0][-1:] == '节':
                # headlinelist.append(lastlist[i])
                thx = int(lastlist[i].split(' ')[0][:-1])
                j = 0
            elif lastlist[i][-2:] == 'MB':
                j += 1
                titles.append((float(lastlist[i].split('/')[1].split('MB')[0]), str(round(thx + j * 0.01, 2)) + ' '+tempstr))
            tempstr = lastlist[i]
            i += 1
        return titles

    @classmethod
    def sortForCourse(self, title):
        return title[0]


if __name__ == '__main__':
    coursesizelist = DeelFile.CoursesizeList()
    print(coursesizelist)
    coursesizelist.sort(key=DeelFile.sortForCourse)
    for tupletemp in coursesizelist:
        print(tupletemp)

if 1 == 2:
# if __name__ == '__main__':
    the_file = DeelFile()

    # # ↓↓↓↓获取到视频时间长度和视频名称
    # names = the_file.get_pathfiles('J:\Work & Learn\Testing video') # 获取路径下所有文件名包括文件夹哦
    # print(names)
    # thlistdict = {}
    # for the_str in names:
    #     if os.path.splitext(the_str)[1] == '.ts':
    #         size = the_file.get_file_times("J:\\Work & Learn\\Testing video\\"+the_str)
    #         if size == -1:
    #             continue
    #         thlistdict[size] = the_str
    # print(thlistdict)
    # print(thlistdict.keys())
    # # ↑↑↑↑获取到视频时间长度和视频名称
    #
    # # ↓↓↓↓  存在的文件进行移动
    # i = 0
    # for tempstr in names:
    #     try:
    #         the_file.filemove('H:\\Other\\Decrypt_video\\from\\'+tempstr.split('.ts')[0]+'.m3u8.sqlite', 'H:\\Other\\Decrypt_video\\done\\'+tempstr.split('.ts')[0]+'.m3u8.sqlite')
    #         i += 1
    #     except Exception as e:
    #         the_file.mylog.warning(e)
    # the_file.mylog.info("移动完成，本次处理文件"+str(i)+"个，如果有报错请人工检查")
    # # ↑↑↑↑
    #
    # # ↓↓↓↓ 修改文件名
    # dictNew = realdict
    # dictOld = thlistdict
    # keyspro = list(dictOld.keys())
    # for key in keyspro:
    #     try:
    #         the_file.filenamechange('J:\\Work & Learn\\Testing video\\'+dictOld[key], 'J:\\Work & Learn\\Testing video\\'+dictNew[key]+'.ts')
    #     except Exception as e:
    #         the_file.mylog.warning(e)
    # # ↑↑↑↑ 修改文件名

    # 创建所有文件夹
    for str in HEADLINE:
        the_file.mymakedir("J:\\Work & Learn\\Testing video\\已处理\\"+str)